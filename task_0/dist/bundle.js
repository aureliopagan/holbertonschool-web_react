/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

// Create two student variables
var student1 = {
    firstName: "John",
    lastName: "Doe",
    age: 20,
    location: "New York"
};
var student2 = {
    firstName: "Jane",
    lastName: "Smith",
    age: 22,
    location: "California"
};
// Store students in an array
var studentsList = [student1, student2];
// Create and render the table
var body = document.getElementsByTagName("body")[0];
var table = document.createElement("table");
var thead = document.createElement("thead");
var tbody = document.createElement("tbody");
// Create table header
var headerRow = document.createElement("tr");
var firstNameHeader = document.createElement("th");
var locationHeader = document.createElement("th");
firstNameHeader.textContent = "First Name";
locationHeader.textContent = "Location";
headerRow.appendChild(firstNameHeader);
headerRow.appendChild(locationHeader);
thead.appendChild(headerRow);
// Create table rows for each student
studentsList.forEach(function (student) {
    var row = document.createElement("tr");
    var firstNameCell = document.createElement("td");
    var locationCell = document.createElement("td");
    firstNameCell.textContent = student.firstName;
    locationCell.textContent = student.location;
    row.appendChild(firstNameCell);
    row.appendChild(locationCell);
    tbody.appendChild(row);
});
// Assemble and append the table
table.appendChild(thead);
table.appendChild(tbody);
body.appendChild(table);

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQVFFLCtCQUErQjtBQUMvQixJQUFNLFFBQVEsR0FBWTtJQUN4QixTQUFTLEVBQUUsTUFBTTtJQUNqQixRQUFRLEVBQUUsS0FBSztJQUNmLEdBQUcsRUFBRSxFQUFFO0lBQ1AsUUFBUSxFQUFFLFVBQVU7Q0FDckIsQ0FBQztBQUVGLElBQU0sUUFBUSxHQUFZO0lBQ3hCLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLFFBQVEsRUFBRSxPQUFPO0lBQ2pCLEdBQUcsRUFBRSxFQUFFO0lBQ1AsUUFBUSxFQUFFLFlBQVk7Q0FDdkIsQ0FBQztBQUVGLDZCQUE2QjtBQUM3QixJQUFNLFlBQVksR0FBbUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFMUQsOEJBQThCO0FBQzlCLElBQU0sSUFBSSxHQUFvQixRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkUsSUFBTSxLQUFLLEdBQXFCLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDaEUsSUFBTSxLQUFLLEdBQTRCLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkUsSUFBTSxLQUFLLEdBQTRCLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFdkUsc0JBQXNCO0FBQ3RCLElBQU0sU0FBUyxHQUF3QixRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BFLElBQU0sZUFBZSxHQUErQixRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pGLElBQU0sY0FBYyxHQUErQixRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRWhGLGVBQWUsQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQzNDLGNBQWMsQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0FBRXhDLFNBQVMsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDdkMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN0QyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTdCLHFDQUFxQztBQUNyQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBZ0I7SUFDcEMsSUFBTSxHQUFHLEdBQXdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsSUFBTSxhQUFhLEdBQTZCLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0UsSUFBTSxZQUFZLEdBQTZCLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFNUUsYUFBYSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQzlDLFlBQVksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUU1QyxHQUFHLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQy9CLEdBQUcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6QixDQUFDLENBQUMsQ0FBQztBQUVILGdDQUFnQztBQUNoQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3R5cGVzY3JpcHRfZGVwZW5kZW5jaWVzLy4vanMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZWZpbmUgdGhlIFN0dWRlbnQgaW50ZXJmYWNlXG5pbnRlcmZhY2UgU3R1ZGVudCB7XG4gICAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU6IHN0cmluZztcbiAgICBhZ2U6IG51bWJlcjtcbiAgICBsb2NhdGlvbjogc3RyaW5nO1xuICB9XG4gIFxuICAvLyBDcmVhdGUgdHdvIHN0dWRlbnQgdmFyaWFibGVzXG4gIGNvbnN0IHN0dWRlbnQxOiBTdHVkZW50ID0ge1xuICAgIGZpcnN0TmFtZTogXCJKb2huXCIsXG4gICAgbGFzdE5hbWU6IFwiRG9lXCIsXG4gICAgYWdlOiAyMCxcbiAgICBsb2NhdGlvbjogXCJOZXcgWW9ya1wiXG4gIH07XG4gIFxuICBjb25zdCBzdHVkZW50MjogU3R1ZGVudCA9IHtcbiAgICBmaXJzdE5hbWU6IFwiSmFuZVwiLFxuICAgIGxhc3ROYW1lOiBcIlNtaXRoXCIsXG4gICAgYWdlOiAyMixcbiAgICBsb2NhdGlvbjogXCJDYWxpZm9ybmlhXCJcbiAgfTtcbiAgXG4gIC8vIFN0b3JlIHN0dWRlbnRzIGluIGFuIGFycmF5XG4gIGNvbnN0IHN0dWRlbnRzTGlzdDogQXJyYXk8U3R1ZGVudD4gPSBbc3R1ZGVudDEsIHN0dWRlbnQyXTtcbiAgXG4gIC8vIENyZWF0ZSBhbmQgcmVuZGVyIHRoZSB0YWJsZVxuICBjb25zdCBib2R5OiBIVE1MQm9keUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07XG4gIGNvbnN0IHRhYmxlOiBIVE1MVGFibGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xuICBjb25zdCB0aGVhZDogSFRNTFRhYmxlU2VjdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhlYWRcIik7XG4gIGNvbnN0IHRib2R5OiBIVE1MVGFibGVTZWN0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKTtcbiAgXG4gIC8vIENyZWF0ZSB0YWJsZSBoZWFkZXJcbiAgY29uc3QgaGVhZGVyUm93OiBIVE1MVGFibGVSb3dFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICBjb25zdCBmaXJzdE5hbWVIZWFkZXI6IEhUTUxUYWJsZUhlYWRlckNlbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xuICBjb25zdCBsb2NhdGlvbkhlYWRlcjogSFRNTFRhYmxlSGVhZGVyQ2VsbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7XG4gIFxuICBmaXJzdE5hbWVIZWFkZXIudGV4dENvbnRlbnQgPSBcIkZpcnN0IE5hbWVcIjtcbiAgbG9jYXRpb25IZWFkZXIudGV4dENvbnRlbnQgPSBcIkxvY2F0aW9uXCI7XG4gIFxuICBoZWFkZXJSb3cuYXBwZW5kQ2hpbGQoZmlyc3ROYW1lSGVhZGVyKTtcbiAgaGVhZGVyUm93LmFwcGVuZENoaWxkKGxvY2F0aW9uSGVhZGVyKTtcbiAgdGhlYWQuYXBwZW5kQ2hpbGQoaGVhZGVyUm93KTtcbiAgXG4gIC8vIENyZWF0ZSB0YWJsZSByb3dzIGZvciBlYWNoIHN0dWRlbnRcbiAgc3R1ZGVudHNMaXN0LmZvckVhY2goKHN0dWRlbnQ6IFN0dWRlbnQpOiB2b2lkID0+IHtcbiAgICBjb25zdCByb3c6IEhUTUxUYWJsZVJvd0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gICAgY29uc3QgZmlyc3ROYW1lQ2VsbDogSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgIGNvbnN0IGxvY2F0aW9uQ2VsbDogSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgIFxuICAgIGZpcnN0TmFtZUNlbGwudGV4dENvbnRlbnQgPSBzdHVkZW50LmZpcnN0TmFtZTtcbiAgICBsb2NhdGlvbkNlbGwudGV4dENvbnRlbnQgPSBzdHVkZW50LmxvY2F0aW9uO1xuICAgIFxuICAgIHJvdy5hcHBlbmRDaGlsZChmaXJzdE5hbWVDZWxsKTtcbiAgICByb3cuYXBwZW5kQ2hpbGQobG9jYXRpb25DZWxsKTtcbiAgICB0Ym9keS5hcHBlbmRDaGlsZChyb3cpO1xuICB9KTtcbiAgXG4gIC8vIEFzc2VtYmxlIGFuZCBhcHBlbmQgdGhlIHRhYmxlXG4gIHRhYmxlLmFwcGVuZENoaWxkKHRoZWFkKTtcbiAgdGFibGUuYXBwZW5kQ2hpbGQodGJvZHkpO1xuICBib2R5LmFwcGVuZENoaWxkKHRhYmxlKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=